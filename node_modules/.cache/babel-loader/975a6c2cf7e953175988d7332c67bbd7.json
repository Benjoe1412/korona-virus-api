{"ast":null,"code":"import _regeneratorRuntime from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var data=require('./data.js');var timeSeries=require('./time-series.js');var express=require('express');var cors=require('cors');var router=express.Router();function run(){return _run.apply(this,arguments);}function _run(){_run=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var locations,locationsTimeSeries,app;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return data.downloadAndParse();case 2:locations=_context3.sent;setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return data.downloadAndParse();case 2:locations=_context.sent;case 3:case\"end\":return _context.stop();}}},_callee);})),1000*60*60*4);_context3.next=6;return timeSeries.downloadAndParse();case 6:locationsTimeSeries=_context3.sent;setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return timeSeries.downloadAndParse();case 2:locationsTimeSeries=_context2.sent;case 3:case\"end\":return _context2.stop();}}},_callee2);})),1000*60*60*4);app=express();app.use(cors());router.get('/data',function(req,res){res.json(locations);});router.get('/time-series',function(req,res){res.json(locationsTimeSeries);});router.listen(8000,function(){console.log('server is running');});router.get('/',function(req,res){res.send('Hello World!');});case 14:case\"end\":return _context3.stop();}}},_callee3);}));return _run.apply(this,arguments);}run();","map":{"version":3,"sources":["D:/home/korona-virus-api/src/index.js"],"names":["data","require","timeSeries","express","cors","router","Router","run","downloadAndParse","locations","setInterval","locationsTimeSeries","app","use","get","req","res","json","listen","console","log","send"],"mappings":"2RACA,GAAMA,CAAAA,IAAI,CAAGC,OAAO,CAAC,WAAD,CAApB,CACA,GAAMC,CAAAA,UAAU,CAAGD,OAAO,CAAC,kBAAD,CAA1B,CACA,GAAME,CAAAA,OAAO,CAAGF,OAAO,CAAC,SAAD,CAAvB,CACA,GAAMG,CAAAA,IAAI,CAAGH,OAAO,CAAC,MAAD,CAApB,CACA,GAAII,CAAAA,MAAM,CAAGF,OAAO,CAACG,MAAR,EAAb,C,QAGeC,CAAAA,G,mHAAf,qMACsBP,CAAAA,IAAI,CAACQ,gBAAL,EADtB,QACIC,SADJ,gBAGAC,WAAW,sEAAC,yJACUV,CAAAA,IAAI,CAACQ,gBAAL,EADV,QACRC,SADQ,qEAAD,GAET,KAAO,EAAP,CAAY,EAAZ,CAAiB,CAFR,CAAX,CAHA,uBAOgCP,CAAAA,UAAU,CAACM,gBAAX,EAPhC,QAOIG,mBAPJ,gBASAD,WAAW,sEAAC,+JACoBR,CAAAA,UAAU,CAACM,gBAAX,EADpB,QACRG,mBADQ,wEAAD,GAET,KAAO,EAAP,CAAY,EAAZ,CAAiB,CAFR,CAAX,CAIMC,GAbN,CAaYT,OAAO,EAbnB,CAcAS,GAAG,CAACC,GAAJ,CAAQT,IAAI,EAAZ,EAEAC,MAAM,CAACS,GAAP,CAAW,OAAX,CAAmB,SAACC,GAAD,CAAMC,GAAN,CAAc,CAC7BA,GAAG,CAACC,IAAJ,CAASR,SAAT,EACH,CAFD,EAIAJ,MAAM,CAACS,GAAP,CAAW,cAAX,CAA0B,SAACC,GAAD,CAAMC,GAAN,CAAc,CACpCA,GAAG,CAACC,IAAJ,CAASN,mBAAT,EACH,CAFD,EAIAN,MAAM,CAACa,MAAP,CAAc,IAAd,CAAoB,UAAM,CACtBC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACH,CAFD,EAIAf,MAAM,CAACS,GAAP,CAAW,GAAX,CAAe,SAACC,GAAD,CAAKC,GAAL,CAAa,CAExBA,GAAG,CAACK,IAAJ,CAAS,cAAT,EACH,CAHD,EA5BA,yD,sCAmCAd,GAAG","sourcesContent":["\r\nconst data = require('./data.js')\r\nconst timeSeries = require('./time-series.js')\r\nconst express = require('express')\r\nconst cors = require('cors')\r\nvar router = express.Router();\r\n\r\n\r\nasync function run(){\r\nlet locations = await data.downloadAndParse();\r\n\r\nsetInterval(async () => {\r\n    locations = await data.downloadAndParse();\r\n},1000 * 60 * 60 * 4)\r\n\r\nlet locationsTimeSeries = await timeSeries.downloadAndParse();\r\n\r\nsetInterval(async () => {\r\n    locationsTimeSeries = await timeSeries.downloadAndParse();\r\n},1000 * 60 * 60 * 4)\r\n\r\nconst app = express()\r\napp.use(cors());\r\n\r\nrouter.get('/data',(req, res) => {\r\n    res.json(locations);\r\n})\r\n\r\nrouter.get('/time-series',(req, res) => {\r\n    res.json(locationsTimeSeries);\r\n})\r\n\r\nrouter.listen(8000, () => {\r\n    console.log('server is running')\r\n})\r\n\r\nrouter.get('/',(req,res) => {\r\n\r\n    res.send('Hello World!');\r\n})\r\n\r\n}\r\n\r\nrun()"]},"metadata":{},"sourceType":"module"}