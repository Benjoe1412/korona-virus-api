{"ast":null,"code":"import _slicedToArray from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var axios=require('axios').default;var parseCsv=require('csv-parse');var _require=require('util'),promisify=_require.promisify;var parseCsvAsync=promisify(parseCsv);var URL='https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/_DATE_.csv';function download(){return _download.apply(this,arguments);}function _download(){_download=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var date,month,monthPadded,day,dayPadded,yesterday,yesterdayUrl,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:date=new Date();date.setDate(date.getDate()-1);month=date.getMonth()+1;monthPadded=month<10?\"0\".concat(month):month;day=date.getDate();dayPadded=day<10?\"0\".concat(day):day;yesterday=\"\".concat(monthPadded,\"-\").concat(dayPadded,\"-\").concat(date.getFullYear());yesterdayUrl=URL.replace('_DATE_',yesterday);_context.next=10;return axios.get(yesterdayUrl);case 10:res=_context.sent;return _context.abrupt(\"return\",res.data);case 12:case\"end\":return _context.stop();}}},_callee);}));return _download.apply(this,arguments);}function parse(_x){return _parse.apply(this,arguments);}function _parse(){_parse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data){var records,locations;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return parseCsvAsync(data,{from_line:2});case 2:records=_context2.sent;locations=records.map(function(record){var _record=_slicedToArray(record,12),fips=_record[0],admin2=_record[1],state=_record[2],country=_record[3],lastUpdated=_record[4],latitude=_record[5],longitude=_record[6],confirmed=_record[7],deaths=_record[8],recovered=_record[9],active=_record[10],combinedKey=_record[11];return{state:state,country:country,latitude:parseInt(latitude),longitude:parseInt(longitude),confirmed:parseInt(confirmed),deaths:parseInt(deaths),recovered:parseInt(recovered),combinedKey:combinedKey};});return _context2.abrupt(\"return\",locations);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _parse.apply(this,arguments);}function downloadAndParse(){return _downloadAndParse.apply(this,arguments);}function _downloadAndParse(){_downloadAndParse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var data,locations;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return download();case 2:data=_context3.sent;_context3.next=5;return parse(data);case 5:locations=_context3.sent;return _context3.abrupt(\"return\",locations);case 7:case\"end\":return _context3.stop();}}},_callee3);}));return _downloadAndParse.apply(this,arguments);}export{download,parse,downloadAndParse};","map":{"version":3,"sources":["D:/home/korona-virus-api/src/data.js"],"names":["axios","require","default","parseCsv","promisify","parseCsvAsync","URL","download","date","Date","setDate","getDate","month","getMonth","monthPadded","day","dayPadded","yesterday","getFullYear","yesterdayUrl","replace","get","res","data","parse","from_line","records","locations","map","record","fips","admin2","state","country","lastUpdated","latitude","longitude","confirmed","deaths","recovered","active","combinedKey","parseInt","downloadAndParse"],"mappings":"0aAAA,GAAMA,CAAAA,KAAK,CAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B,CACA,GAAMC,CAAAA,QAAQ,CAAGF,OAAO,CAAC,WAAD,CAAxB,CACA,aAAsBA,OAAO,CAAC,MAAD,CAA7B,CAAQG,SAAR,UAAQA,SAAR,CACA,GAAMC,CAAAA,aAAa,CAAGD,SAAS,CAACD,QAAD,CAA/B,CAEA,GAAMG,CAAAA,GAAG,CAAG,4HAAZ,C,QAGeC,CAAAA,Q,kIAAf,uMAEUC,IAFV,CAEiB,GAAIC,CAAAA,IAAJ,EAFjB,CAGID,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,GAAe,CAA5B,EACMC,KAJV,CAIkBJ,IAAI,CAACK,QAAL,GAAkB,CAJpC,CAKUC,WALV,CAKwBF,KAAK,CAAG,EAAR,YAAiBA,KAAjB,EAA2BA,KALnD,CAMUG,GANV,CAMgBP,IAAI,CAACG,OAAL,EANhB,CAOUK,SAPV,CAOsBD,GAAG,CAAG,EAAN,YAAeA,GAAf,EAAuBA,GAP7C,CASUE,SATV,WASyBH,WATzB,aASwCE,SATxC,aASqDR,IAAI,CAACU,WAAL,EATrD,EAUUC,YAVV,CAUyBb,GAAG,CAACc,OAAJ,CAAY,QAAZ,CAAqBH,SAArB,CAVzB,wBAYsBjB,CAAAA,KAAK,CAACqB,GAAN,CAAUF,YAAV,CAZtB,SAYUG,GAZV,+CAaWA,GAAG,CAACC,IAbf,yD,mDAeeC,CAAAA,K,2HAAf,kBAAqBD,IAArB,mKAC0BlB,CAAAA,aAAa,CAACkB,IAAD,CAAO,CAAEE,SAAS,CAAE,CAAb,CAAP,CADvC,QACUC,OADV,gBAGcC,SAHd,CAG0BD,OAAO,CAACE,GAAR,CAAY,SAAAC,MAAM,CAAI,CACpC,2BAKKA,MALL,KACIC,IADJ,YACUC,MADV,YACiBC,KADjB,YACuBC,OADvB,YAC+BC,WAD/B,YAEIC,QAFJ,YAEaC,SAFb,YAEwBC,SAFxB,YAEmCC,MAFnC,YAE2CC,SAF3C,YAGIC,MAHJ,aAGYC,WAHZ,aAOC,MAAO,CACHT,KAAK,CAALA,KADG,CAEHC,OAAO,CAAPA,OAFG,CAGHE,QAAQ,CAAEO,QAAQ,CAACP,QAAD,CAHf,CAIHC,SAAS,CAAEM,QAAQ,CAACN,SAAD,CAJhB,CAKHC,SAAS,CAAEK,QAAQ,CAACL,SAAD,CALhB,CAMHC,MAAM,CAAEI,QAAQ,CAACJ,MAAD,CANb,CAOHC,SAAS,CAAEG,QAAQ,CAACH,SAAD,CAPhB,CAQHE,WAAW,CAAXA,WARG,CAAP,CAUJ,CAlBiB,CAH1B,kCAuBed,SAvBf,0D,gDA0BegB,CAAAA,gB,0JAAf,kLACmBpC,CAAAA,QAAQ,EAD3B,QACMgB,IADN,uCAEwBC,CAAAA,KAAK,CAACD,IAAD,CAF7B,QAEMI,SAFN,iDAGOA,SAHP,0D,mDAOA,OACIpB,QADJ,CAEIiB,KAFJ,CAGImB,gBAHJ","sourcesContent":["const axios = require('axios').default\r\nconst parseCsv = require('csv-parse')\r\nconst { promisify } = require('util')\r\nconst parseCsvAsync = promisify(parseCsv)\r\n\r\nconst URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/_DATE_.csv';\r\n\r\n\r\nasync function download(){\r\n\r\n    const date = new Date();\r\n    date.setDate(date.getDate()-1);\r\n    const month = date.getMonth() + 1;\r\n    const monthPadded = month < 10 ? `0${month}` : month;\r\n    const day = date.getDate();\r\n    const dayPadded = day < 10 ? `0${day}` : day;\r\n\r\n    const yesterday = `${monthPadded}-${dayPadded}-${date.getFullYear()}`;\r\n    const yesterdayUrl = URL.replace('_DATE_',yesterday);\r\n\r\n    const res = await axios.get(yesterdayUrl);\r\n    return res.data;\r\n}\r\nasync function parse(data) {\r\n    const records = await parseCsvAsync(data, { from_line: 2 })\r\n        \r\n        const locations = records.map(record => {\r\n            const [ \r\n                fips, admin2,state,country,lastUpdated,\r\n                latitude,longitude, confirmed, deaths, recovered,\r\n                active, combinedKey\r\n\r\n             ] = record;\r\n\r\n             return {\r\n                 state,\r\n                 country,\r\n                 latitude: parseInt(latitude),\r\n                 longitude: parseInt(longitude),\r\n                 confirmed: parseInt(confirmed),\r\n                 deaths: parseInt(deaths),\r\n                 recovered: parseInt(recovered),\r\n                 combinedKey\r\n             }\r\n        });\r\n\r\n        return locations;\r\n}\r\n\r\nasync function downloadAndParse(){\r\nconst data = await download();\r\nconst locations = await parse(data);\r\nreturn locations;\r\n\r\n}\r\n\r\nexport {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}