{"ast":null,"code":"import _createForOfIteratorHelper from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toArray from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";import _regeneratorRuntime from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/home/korona-virus-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var axios=require('axios').default;var parseCsv=require('csv-parse');var _require=require('util'),promisify=_require.promisify;var parseCsvAsync=promisify(parseCsv);var TYPES=['confirmed','deaths','recovered'];var URL='https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv';//https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv\nfunction download(_x){return _download.apply(this,arguments);}function _download(){_download=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(type){var url,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=URL.replace('_TYPE_',type);_context.next=3;return axios.get(url);case 3:res=_context.sent;return _context.abrupt(\"return\",res.data);case 5:case\"end\":return _context.stop();}}},_callee);}));return _download.apply(this,arguments);}function parse(_x2){return _parse.apply(this,arguments);}function _parse(){_parse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data){var records,locations,locationsById;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return parseCsvAsync(data,{from_line:2});case 2:records=_context2.sent;locations=records.map(function(record){var _record=_toArray(record),state=_record[0],country=_record[1],latitude=_record[2],longitude=_record[3],values=_record.slice(4);var id=\"\".concat(state,\"-\").concat(country);return{id:id,state:state,country:country,latitude:parseInt(latitude),longitude:parseInt(longitude),values:values.map(function(value){return parseInt(value);})};});locationsById=locations.reduce(function(acc,val){acc[val.id]=val;return acc;},{});return _context2.abrupt(\"return\",locationsById);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return _parse.apply(this,arguments);}function downloadAndParse(){return _downloadAndParse.apply(this,arguments);}function _downloadAndParse(){_downloadAndParse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var locationsByType,_iterator,_step,type,data,locations;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:locationsByType={};_iterator=_createForOfIteratorHelper(TYPES);_context3.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context3.next=14;break;}type=_step.value;_context3.next=8;return download(type);case 8:data=_context3.sent;_context3.next=11;return parse(data);case 11:locationsByType[type]=_context3.sent;case 12:_context3.next=4;break;case 14:_context3.next=19;break;case 16:_context3.prev=16;_context3.t0=_context3[\"catch\"](2);_iterator.e(_context3.t0);case 19:_context3.prev=19;_iterator.f();return _context3.finish(19);case 22:locations=Object.keys(locationsByType.confirmed).map(function(id){var confirmed=locationsByType.confirmed[id]||{values:[]};var deaths=locationsByType.deaths[id]||{values:[]};var recovered=locationsByType.recovered[id]||{values:[]};return{id:id,stae:confirmed.state,country:confirmed.country,latitude:confirmed.latitude,longitude:confirmed.longitude,confirmed:confirmed.values,deaths:confirmed.values,recovered:confirmed.values};});return _context3.abrupt(\"return\",locations);case 24:case\"end\":return _context3.stop();}}},_callee3,null,[[2,16,19,22]]);}));return _downloadAndParse.apply(this,arguments);}module.exports={download:download,parse:parse,downloadAndParse:downloadAndParse};/*\r\nexport default {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n  }\r\n  */","map":{"version":3,"sources":["D:/home/korona-virus-api/src/time-series.js"],"names":["axios","require","default","parseCsv","promisify","parseCsvAsync","TYPES","URL","download","type","url","replace","get","res","data","parse","from_line","records","locations","map","record","state","country","latitude","longitude","values","id","parseInt","value","locationsById","reduce","acc","val","downloadAndParse","locationsByType","Object","keys","confirmed","deaths","recovered","stae","module","exports"],"mappings":"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","sourcesContent":["const axios = require('axios').default\r\nconst parseCsv = require('csv-parse')\r\nconst { promisify } = require('util')\r\nconst parseCsvAsync = promisify(parseCsv)\r\n\r\nconst TYPES = ['confirmed', 'deaths', 'recovered']\r\n\r\nconst URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv';\r\n\r\n\r\n//https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv\r\n\r\nasync function download(type){\r\n    const url = URL.replace('_TYPE_',type);\r\n    const res = await axios.get(url);\r\n    return res.data;\r\n}\r\n\r\n\r\nasync function parse(data) {\r\n    const records = await parseCsvAsync(data, { from_line: 2 })\r\n        \r\n        const locations = records.map(record => {\r\n            const [ state,country,latitude,longitude, ...values ] = record;\r\n            \r\n            const id = `${state}-${country}`;\r\n\r\n\r\n             return {\r\n                 id,\r\n                 state,\r\n                 country,\r\n                 latitude: parseInt(latitude),\r\n                 longitude: parseInt(longitude),\r\n                 values: values.map(value => parseInt(value)),\r\n             }\r\n        });\r\nconst locationsById = locations.reduce((acc, val) => {\r\n    acc[val.id] = val;\r\n    return acc;\r\n}, {})\r\n        return locationsById;\r\n}\r\n\r\n\r\nasync function downloadAndParse(){\r\n    const locationsByType = {};\r\n\r\n    for (const type of TYPES){\r\n        const data = await download(type);\r\n        locationsByType[type] =  await parse(data);\r\n    }\r\n    const locations = Object.keys(locationsByType.confirmed).map(id => {\r\n        const confirmed = locationsByType.confirmed[id] || { values: []};\r\n        const deaths = locationsByType.deaths[id] || { values: []};\r\n        const recovered = locationsByType.recovered[id] || { values: []};\r\n        return {\r\n            id,\r\n            stae: confirmed.state,\r\n            country: confirmed.country,\r\n            latitude: confirmed.latitude,\r\n            longitude: confirmed.longitude,\r\n\r\n            confirmed: confirmed.values,\r\n            deaths: confirmed.values,\r\n            recovered: confirmed.values\r\n\r\n        };\r\n    });\r\n\r\nreturn locations;\r\n\r\n}\r\nmodule.exports = {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n}\r\n/*\r\nexport default {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n  }\r\n  */"]},"metadata":{},"sourceType":"module"}