{"version":3,"sources":["index.js","data.js","time-series.js","../node_modules/express/lib sync"],"names":["data","require","timeSeries","express","cors","a","downloadAndParse","locations","setInterval","locationsTimeSeries","app","use","get","req","res","json","listen","console","log","send","run","axios","default","parseCsv","parseCsvAsync","promisify","URL","download","date","Date","setDate","getDate","month","getMonth","monthPadded","day","dayPadded","yesterday","getFullYear","yesterdayUrl","replace","parse","from_line","records","map","record","state","country","latitude","longitude","confirmed","deaths","recovered","combinedKey","parseInt","module","exports","TYPES","type","url","values","id","value","locationsById","reduce","acc","val","locationsByType","Object","keys","stae","webpackEmptyContext","e","Error","code","resolve"],"mappings":"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","file":"static/js/main.be92a5c5.chunk.js","sourcesContent":["\r\nconst data = require('./data.js')\r\nconst timeSeries = require('./time-series.js')\r\nconst express = require('express')\r\nconst cors = require('cors')\r\n\r\n\r\n\r\nasync function run(){\r\nlet locations = await data.downloadAndParse();\r\n\r\nsetInterval(async () => {\r\n    locations = await data.downloadAndParse();\r\n},1000 * 60 * 60 * 4)\r\n\r\nlet locationsTimeSeries = await timeSeries.downloadAndParse();\r\n\r\nsetInterval(async () => {\r\n    locationsTimeSeries = await timeSeries.downloadAndParse();\r\n},1000 * 60 * 60 * 4)\r\n\r\nconst app = express()\r\napp.use(cors());\r\n\r\napp.get('/data',(req, res) => {\r\n    res.json(locations);\r\n})\r\n\r\napp.get('/time-series',(req, res) => {\r\n    res.json(locationsTimeSeries);\r\n})\r\n\r\napp.listen(8000, () => {\r\n    console.log('server is running')\r\n})\r\n\r\napp.get('/',(req,res) => {\r\n\r\n    res.send('Hello World!');\r\n})\r\n\r\n}\r\n\r\nrun()","const axios = require('axios').default\r\nconst parseCsv = require('csv-parse')\r\nconst { promisify } = require('util')\r\nconst parseCsvAsync = promisify(parseCsv)\r\n\r\nconst URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/_DATE_.csv';\r\n\r\n\r\nasync function download(){\r\n\r\n    const date = new Date();\r\n    date.setDate(date.getDate()-1);\r\n    const month = date.getMonth() + 1;\r\n    const monthPadded = month < 10 ? `0${month}` : month;\r\n    const day = date.getDate();\r\n    const dayPadded = day < 10 ? `0${day}` : day;\r\n\r\n    const yesterday = `${monthPadded}-${dayPadded}-${date.getFullYear()}`;\r\n    const yesterdayUrl = URL.replace('_DATE_',yesterday);\r\n\r\n    const res = await axios.get(yesterdayUrl);\r\n    return res.data;\r\n}\r\nasync function parse(data) {\r\n    const records = await parseCsvAsync(data, { from_line: 2 })\r\n        \r\n        const locations = records.map(record => {\r\n            const [ \r\n                fips, admin2,state,country,lastUpdated,\r\n                latitude,longitude, confirmed, deaths, recovered,\r\n                active, combinedKey\r\n\r\n             ] = record;\r\n\r\n             return {\r\n                 state,\r\n                 country,\r\n                 latitude: parseInt(latitude),\r\n                 longitude: parseInt(longitude),\r\n                 confirmed: parseInt(confirmed),\r\n                 deaths: parseInt(deaths),\r\n                 recovered: parseInt(recovered),\r\n                 combinedKey\r\n             }\r\n        });\r\n\r\n        return locations;\r\n}\r\n\r\nasync function downloadAndParse(){\r\nconst data = await download();\r\nconst locations = await parse(data);\r\nreturn locations;\r\n\r\n}\r\nmodule.exports = {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n}\r\n/*\r\nexport default {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n  }\r\n*/","const axios = require('axios').default\r\nconst parseCsv = require('csv-parse')\r\nconst { promisify } = require('util')\r\nconst parseCsvAsync = promisify(parseCsv)\r\n\r\nconst TYPES = ['confirmed', 'deaths', 'recovered']\r\n\r\nconst URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv';\r\n\r\n\r\n//https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv\r\n\r\nasync function download(type){\r\n    const url = URL.replace('_TYPE_',type);\r\n    const res = await axios.get(url);\r\n    return res.data;\r\n}\r\n\r\n\r\nasync function parse(data) {\r\n    const records = await parseCsvAsync(data, { from_line: 2 })\r\n        \r\n        const locations = records.map(record => {\r\n            const [ state,country,latitude,longitude, ...values ] = record;\r\n            \r\n            const id = `${state}-${country}`;\r\n\r\n\r\n             return {\r\n                 id,\r\n                 state,\r\n                 country,\r\n                 latitude: parseInt(latitude),\r\n                 longitude: parseInt(longitude),\r\n                 values: values.map(value => parseInt(value)),\r\n             }\r\n        });\r\nconst locationsById = locations.reduce((acc, val) => {\r\n    acc[val.id] = val;\r\n    return acc;\r\n}, {})\r\n        return locationsById;\r\n}\r\n\r\n\r\nasync function downloadAndParse(){\r\n    const locationsByType = {};\r\n\r\n    for (const type of TYPES){\r\n        const data = await download(type);\r\n        locationsByType[type] =  await parse(data);\r\n    }\r\n    const locations = Object.keys(locationsByType.confirmed).map(id => {\r\n        const confirmed = locationsByType.confirmed[id] || { values: []};\r\n        const deaths = locationsByType.deaths[id] || { values: []};\r\n        const recovered = locationsByType.recovered[id] || { values: []};\r\n        return {\r\n            id,\r\n            stae: confirmed.state,\r\n            country: confirmed.country,\r\n            latitude: confirmed.latitude,\r\n            longitude: confirmed.longitude,\r\n\r\n            confirmed: confirmed.values,\r\n            deaths: confirmed.values,\r\n            recovered: confirmed.values\r\n\r\n        };\r\n    });\r\n\r\nreturn locations;\r\n\r\n}\r\nmodule.exports = {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n}\r\n/*\r\nexport default {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n  }\r\n  */","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 295;"],"sourceRoot":""}