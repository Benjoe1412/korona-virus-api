{"version":3,"sources":["time-series.js","../node_modules/express/lib sync","data.js","index.js"],"names":["axios","require","default","parseCsv","parseCsvAsync","promisify","TYPES","URL","download","type","a","url","replace","get","res","data","parse","from_line","records","locations","map","record","state","country","latitude","longitude","values","id","parseInt","value","locationsById","reduce","acc","val","locationsByType","Object","keys","confirmed","deaths","recovered","stae","downloadAndParse","webpackEmptyContext","req","e","Error","code","resolve","module","exports","date","Date","setDate","getDate","month","getMonth","monthPadded","day","dayPadded","yesterday","getFullYear","yesterdayUrl","combinedKey","timeSeries","express","cors","setInterval","locationsTimeSeries","app","use","json","listen","console","log","send","run"],"mappings":"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","file":"static/js/main.7bd96123.chunk.js","sourcesContent":["const axios = require('axios').default\r\nconst parseCsv = require('csv-parse')\r\nconst { promisify } = require('util')\r\nconst parseCsvAsync = promisify(parseCsv)\r\n\r\nconst TYPES = ['confirmed', 'deaths', 'recovered']\r\n\r\nconst URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv';\r\n\r\n\r\n//https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19__TYPE__global.csv\r\n\r\nasync function download(type){\r\n    const url = URL.replace('_TYPE_',type);\r\n    const res = await axios.get(url);\r\n    return res.data;\r\n}\r\n\r\n\r\nasync function parse(data) {\r\n    const records = await parseCsvAsync(data, { from_line: 2 })\r\n        \r\n        const locations = records.map(record => {\r\n            const [ state,country,latitude,longitude, ...values ] = record;\r\n            \r\n            const id = `${state}-${country}`;\r\n\r\n\r\n             return {\r\n                 id,\r\n                 state,\r\n                 country,\r\n                 latitude: parseInt(latitude),\r\n                 longitude: parseInt(longitude),\r\n                 values: values.map(value => parseInt(value)),\r\n             }\r\n        });\r\nconst locationsById = locations.reduce((acc, val) => {\r\n    acc[val.id] = val;\r\n    return acc;\r\n}, {})\r\n        return locationsById;\r\n}\r\n\r\n\r\nasync function downloadAndParse(){\r\n    const locationsByType = {};\r\n\r\n    for (const type of TYPES){\r\n        const data = await download(type);\r\n        locationsByType[type] =  await parse(data);\r\n    }\r\n    const locations = Object.keys(locationsByType.confirmed).map(id => {\r\n        const confirmed = locationsByType.confirmed[id] || { values: []};\r\n        const deaths = locationsByType.deaths[id] || { values: []};\r\n        const recovered = locationsByType.recovered[id] || { values: []};\r\n        return {\r\n            id,\r\n            stae: confirmed.state,\r\n            country: confirmed.country,\r\n            latitude: confirmed.latitude,\r\n            longitude: confirmed.longitude,\r\n\r\n            confirmed: confirmed.values,\r\n            deaths: confirmed.values,\r\n            recovered: confirmed.values\r\n\r\n        };\r\n    });\r\n\r\nreturn locations;\r\n\r\n}\r\n\r\nexport default {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n  }","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 292;","const axios = require('axios').default\r\nconst parseCsv = require('csv-parse')\r\nconst { promisify } = require('util')\r\nconst parseCsvAsync = promisify(parseCsv)\r\n\r\nconst URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/_DATE_.csv';\r\n\r\n\r\nasync function download(){\r\n\r\n    const date = new Date();\r\n    date.setDate(date.getDate()-1);\r\n    const month = date.getMonth() + 1;\r\n    const monthPadded = month < 10 ? `0${month}` : month;\r\n    const day = date.getDate();\r\n    const dayPadded = day < 10 ? `0${day}` : day;\r\n\r\n    const yesterday = `${monthPadded}-${dayPadded}-${date.getFullYear()}`;\r\n    const yesterdayUrl = URL.replace('_DATE_',yesterday);\r\n\r\n    const res = await axios.get(yesterdayUrl);\r\n    return res.data;\r\n}\r\nasync function parse(data) {\r\n    const records = await parseCsvAsync(data, { from_line: 2 })\r\n        \r\n        const locations = records.map(record => {\r\n            const [ \r\n                fips, admin2,state,country,lastUpdated,\r\n                latitude,longitude, confirmed, deaths, recovered,\r\n                active, combinedKey\r\n\r\n             ] = record;\r\n\r\n             return {\r\n                 state,\r\n                 country,\r\n                 latitude: parseInt(latitude),\r\n                 longitude: parseInt(longitude),\r\n                 confirmed: parseInt(confirmed),\r\n                 deaths: parseInt(deaths),\r\n                 recovered: parseInt(recovered),\r\n                 combinedKey\r\n             }\r\n        });\r\n\r\n        return locations;\r\n}\r\n\r\nasync function downloadAndParse(){\r\nconst data = await download();\r\nconst locations = await parse(data);\r\nreturn locations;\r\n\r\n}\r\n\r\nexport default {\r\n    download,\r\n    parse,\r\n    downloadAndParse\r\n  }\r\n","\r\n//const data = require('./data.js')\r\nimport downloadAndParse from './data';\r\nconst timeSeries = require('./time-series.js')\r\nconst express = require('express')\r\nconst cors = require('cors')\r\n\r\n\r\n\r\nasync function run(){\r\nlet locations = await downloadAndParse();\r\n\r\nsetInterval(async () => {\r\n    locations = await downloadAndParse();\r\n},1000 * 60 * 60 * 4)\r\n\r\nlet locationsTimeSeries = await timeSeries.downloadAndParse();\r\n\r\nsetInterval(async () => {\r\n    locationsTimeSeries = await timeSeries.downloadAndParse();\r\n},1000 * 60 * 60 * 4)\r\n\r\nconst app = express()\r\napp.use(cors());\r\n\r\napp.get('/data',(req, res) => {\r\n    res.json(locations);\r\n})\r\n\r\napp.get('/time-series',(req, res) => {\r\n    res.json(locationsTimeSeries);\r\n})\r\n\r\napp.listen(8000, () => {\r\n    console.log('server is running')\r\n})\r\n\r\napp.get('/',(req,res) => {\r\n\r\n    res.send('Hello World!');\r\n})\r\n\r\n}\r\n\r\nrun()"],"sourceRoot":""}